type Query {
      info : String!
      posts : [post!]!
      users : [user!]!
      topic(topicID: Int!) : topic
      selectUserPosts(userID : Int!) : user!
  }

  input UserInput {
      id : ID!,
      firstName : String!,
      lastName : String!,
      pseudo : String!
      
  }

  type Mutation{
      createUser(firstName: String!,lastName : String!,pseudo : String!) : user!
      updateUser(userID : Int!, firstName : String,lastName : String, pseudo : String) : updateUserResponse!
      deleteUser(userID: Int!): String!
      signup(firstName: String!,lastName : String!,pseudo : String!,password : String!) : authPayload!
      login(pseudo : String!,password : String!): authPayload!
      createPost(userID: Int!, topicID : Int!, text : String!) :post!
      updatePost(postID : Int!,text : String!): updatePostResponse!
      deletePost(postID : Int!) : String!
      createTopic(title: String!) : topic!
      updateTopic(topicID : Int!,title : String!) : updateTopicResponse!
      deleteTopic(topicID : Int!) : String!

      
  }



  type post {
      id: ID!
      author: user!
      text : String!
  }

  type user {
      id: ID!
      firstName : String!
      lastName : String!
      pseudo : String!
      password : String!
      posts : [post]!
  }

  type topic {
      id : ID!,
      title : String!,
      posts : [post]!
  }

  type updateUserResponse {
      user : user,
      message : String
  }

  type updatePostResponse {
      post : post,
      message : String
  }

  type updateTopicResponse {
      topic : topic,
      message : String
  }

  type authPayload {
      user : user,
      token : String!
  }